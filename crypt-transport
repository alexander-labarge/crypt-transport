#!/bin/bash

# Function to display usage information
usage() {
    echo "Usage: $0 --ip <IP_ADDRESS> [--debug] [--install] [--help]"
    echo "  --ip <IP_ADDRESS>   Specify the IP address."
    echo "  --debug             Enable debug mode (optional)."
    echo "  --install           Install required packages."
    echo "  --help              Display this help message."
    exit 1
}

# Default values
DEBUG=""
INSTALL=false

# Parse arguments
while [[ "$1" != "" ]]; do
    case $1 in
        --ip )
            shift
            IP_ADDRESS=$1
            ;;
        --debug )
            DEBUG="--debug"
            ;;
        --install )
            INSTALL=true
            ;;
        --help )
            usage
            ;;
        * )
            usage
            ;;
    esac
    shift
done

# Check if IP_ADDRESS is provided
if [ -z "$IP_ADDRESS" ]; then
    usage
fi

# Install required packages if --install flag is set
if [ "$INSTALL" = true ]; then
    echo "Installing required packages..."

    # Update and upgrade the system
    sudo apt update && sudo apt upgrade -y

    # Install required packages
    sudo apt install -y nodejs npm git curl wget vim build-essential libssl-dev libffi-dev python3 python3-dev python3-flask python3-venv python3-pip pipx

    # Clone the project from GitHub if it doesn't exist
    if [ ! -d "crypt-transport" ]; then
        git clone https://github.com/alexander-labarge/crypt-transport.git
    fi
    
    cd crypt-transport || { echo "Directory crypt-transport not found."; exit 1; }

    # Set up virtual environment for the backend
    cd backend || { echo "Directory backend not found."; exit 1; }

    # Remove existing virtual environment if it exists
    if [ -d "venv" ]; then
        rm -rf venv
    fi

    # Create a new virtual environment
    python3 -m venv venv

    # Source the virtual environment
    source venv/bin/activate

    # Install the required Python packages
    pip install --upgrade pip
    if [ -f requirements.txt ]; then
        pip install -r requirements.txt
    else
        echo "requirements.txt not found."
        exit 1
    fi

    # Set up frontend
    cd ../frontend || { echo "Directory frontend not found."; exit 1; }
    npm install axios react-dropzone formik yup react-router-dom bootstrap react react-bootstrap

    echo "Installation and setup complete."

    # Go back to backend directory
    cd ../backend || { echo "Directory backend not found."; exit 1; }
fi

# Run npm command with IP in the background
cd ../frontend || { echo "Directory frontend not found."; exit 1; }
nohup npm run start-with-ip --ip=$IP_ADDRESS:5005 > frontend.log 2>&1 &

# Run python command with IP and optional debug flag in the background
cd ../backend || { echo "Directory backend not found."; exit 1; }
nohup python fileupload.py --ip $IP_ADDRESS $DEBUG > backend.log 2>&1 &

# Keep the script running to keep the background processes active
echo "Services are running. Press Ctrl+C to stop."
wait
